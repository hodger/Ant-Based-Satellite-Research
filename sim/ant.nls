globals [ ant-dispatch-table NO_VAL visited ]

breed [ ants ant ]

undirected-link-breed [ connectors connector ]

ants-own [ my-system
           
           my-sentinel
           
           threshold
           
           variable
           
           gps
           
           results
           
           pheromone-type
           
           species
           
           ;risk-pieces
           
           name
           
           average index std-dev num-deviations sum-of-squares
           
           is-dispatched?
           
           is-waiting?
           
           time-dispatched ]

;static procedure
to setup-ants 
  set visited []
  set NO_VAL "NO_VAL"
  set ant-dispatch-table table:make
  table:put ant-dispatch-table "deviation" task [ go-deviation ]
  create-ants antnum-deviation [
    setup-basic-ant
    setup-deviation-ant "freddy" 3 "LONG"
  ]
end

to setup-basic-ant
  set shape "bug"
  set color yellow
  set zcor 49
  set is-dispatched? false
  set is-waiting? false   
end

;points is a list of two data points
to setup-deviation-ant [ a-name num-dev a-variable ]
  set my-system NO_VAL
  set my-sentinel NO_VAL
  set name a-name
  set species "deviation"
  set pheromone-type DEVIATION-PHEROMONE
  set variable a-variable
  set num-deviations num-dev
  set results []
end

to setup-location-ant [ sys points a-name ]
  set my-system sys
  set name a-name
  set species "location"
end

to go-ant
  let ret runresult table:get ant-dispatch-table species 
  if ret != false [ 
    set results lput ret results 
  ]
end

to-report go-deviation
  set gps (list table:get [sat-data] of my-system "LAT" table:get [sat-data] of my-system "LONG")
  let current-value table:get [sat-data] of my-system variable
  ifelse abs (average - current-value) > threshold [ 
    ;we found an abnormality
    report (list gps variable current-value) 
  ]
  [
    ;system normal, reset detection criteria
    set index index + 1
    let delta current-value - average
    set average average + (delta / index)
    set sum-of-squares sum-of-squares + delta * (current-value - average)
    set std-dev sqrt (sum-of-squares / (index - 1))
    set threshold std-dev * num-deviations

    report false
  ]
end

to draw-ant
  ifelse is-dispatched? [
    set xcor [xcor] of my-system
    set ycor [ycor] of my-system
    if not any? my-connectors [
      create-connector-with my-sentinel
    ] 
  ]
  [
    ask my-connectors [ die ]
    set xcor [xcor] of my-sentinel
    set ycor [ycor] of my-sentinel
  ]
  
end

to move-ant
  ; to-do
  ; maybe don't move?
  ;set my-sentinel NO_VAL
  ;set my-system NO_VAL
  choose-sentinel
  choose-sat
end

to choose-sentinel
  ;clear self from current ant-queue
  ;if my-sentinel != NO_VAL [
  ;  ask my-sentinel [
  ;    let existing-ants table:get ant-queues [who] of [my-sat] of [my-system] of myself
  ;    let me [who] of myself
  ;    table:put ant-queues [who] of [my-sat] of [my-system] of myself remove me existing-ants 
  ;  ]
  ;]
  let spinner [];array:from-list (n-values (array:item total-pheromones pheromone-type) [0])
  ask sentinels with [participating and table:length ant-queues > 0] [
     let current-pheromone-value array:item total-pheromone-values [pheromone-type] of myself
     ;add one to prevent zero pheromone sentinels from being excluded
     set current-pheromone-value current-pheromone-value + 1
     foreach n-values current-pheromone-value [?] [
       set spinner lput self spinner
     ]
  ]
  show spinner
  let selected-sentinel item (random (length spinner)) spinner
  set my-sentinel selected-sentinel
  show (word "ant " self " chose " selected-sentinel)
end

;need to update total pheromones before we call this.
to choose-sat
  ;let base 0
  ;let current-total array:item total-pheromone-values pheromone-type
  ;initialize weighted movement chooser
  let spinner [] ;array:from-list n-values current-total [0] 
  ask my-sentinel [
    ;for every sat
    foreach table:keys sat-pheromone-values [
      ;get the sat, the array, and the current value
      let current-sat sat ?
      let current-array table:get sat-pheromone-values ?
      let current-pheromone-value array:item current-array [pheromone-type] of myself
      ;add one to pervent zero-pheromone satellites from being excluded
      set current-pheromone-value current-pheromone-value + 1
      ;place the sat in our chooser as many times as it has pheromones of our type
      foreach n-values current-pheromone-value [?] [
        set spinner lput current-sat spinner 
      ]
    ]   
     ;randomly select a satellite from the weighted chooser
    show spinner
    let selected-sat (item (random (length spinner)) spinner)
    ;show selected-sat
    show (word "ant " self " chose " [my-system] of selected-sat)
    let existing-queue table:get ant-queues [who] of selected-sat 
    let ready (prep-ant myself selected-sat)
    ifelse ready [
      table:put ant-queues ([who] of selected-sat) lput ([who] of myself) existing-queue
      ask myself [
        set is-waiting? true 
      ]
    ]
    [
      ask myself [
        show (word "Scrambling the movement, because " selected-sat " was unavailable.")
        set my-sentinel NO_VAL 
        set my-system NO_VAL
        move-ant
      ]
    ]
    
    ;set my-system [my-system] of selected-sat
  ]
end

to report-ant
  let me self
  let answer false
  ask my-sentinel [
    ;communicate with ant
    set answer validate-report [results] of me
  ]
  set results []
  if answer > 0 [
    drop-pheromones answer
  ]
end

to drop-pheromones [concentration]
  show "dropping pheromones"
  let sat-node 0
  ;show my-system
  ask my-system [ set sat-node [who] of my-sat ]
  ;show sat-node
  ask my-sentinel [
     let existing-pheromone-value array:item (table:get sat-pheromone-values sat-node) [pheromone-type] of myself
     array:set (table:get sat-pheromone-values sat-node) [pheromone-type] of myself (existing-pheromone-value + concentration)
     
     ;this updates the sentinels total value for the specified pheromone.
     let existing-total-pheromone-value array:item total-pheromone-values [pheromone-type] of myself
     array:set total-pheromone-values [pheromone-type] of myself (existing-total-pheromone-value + concentration)
     ;update-total-pheromones
  ]
  reset-time (sat sat-node) pheromone-type
  ;refresh when we last put down pheromones here.
  ; we should not need to update global-pheromone-map
  ;table:put global-pheromone-map sat-node table:get [sat-pheromone-values] of my-sentinel sat-node
end