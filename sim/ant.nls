globals [ ant-dispatch-table NO_VAL visited ]

breed [ ants ant ]

undirected-link-breed [ connectors connector ]

ants-own [ my-system
           
           my-sentinel
           
           threshold
           
           variable
           
           gps
           
           results
           
           species
           
           ;risk-pieces
           
           name
           
           average index std-dev num-deviations sum-of-squares
           
           is-dispatched?
           
           is-waiting?
           
           time-dispatched 
           
           ;NEW
           my-config-index
           
           my-config
           
           my-sat ]

;test comment

;static procedure
to setup-ants 
  set visited []
  set NO_VAL "NO_VAL"
  create-ants ant-num [
    setup-basic-ant "freddy"
  ]
end

to setup-basic-ant [a-name]
  set name a-name
  set shape "bug"
  set color yellow
  set zcor 49
  set is-dispatched? false
  set is-waiting? false   
end

;test for potential problem
to go-ant
  let new-list []
  ask my-sat [
    if has-problem? [my-config] of myself [
      set new-list (lput (list lat long) [results] of myself)
    ]
  ]
  set results new-list
end

to draw-ant
  ifelse is-dispatched? [
    set xcor [xcor] of my-system
    set ycor [ycor] of my-system
    if not any? my-connectors [
      create-connector-with my-sentinel
    ]
  ]
  [
    ask my-connectors [ die ]
    set xcor [xcor] of my-sentinel
    set ycor [ycor] of my-sentinel
  ]
end

to move-ant
  ; to-do
  ; maybe don't move?
  ;set my-sentinel NO_VAL
  ;set my-system NO_VAL
  choose-sentinel
  choose-sat
  choose-config
end

to choose-sentinel
  let spinner []
  ask sentinels with [participating and table:length ant-queues > 0] [
    foreach n-values (pheromones + 1) [?] [
      set spinner lput self spinner 
    ] 
  ]
  let selected-sentinel item (random (length spinner)) spinner
  set my-sentinel selected-sentinel
  show (word "ant " self " chose " selected-sentinel)
end

to choose-sat
  let spinner []
  ask my-sentinel [
    foreach table:keys [sat-sum-pheromones] of my-sentinel [
      let current-sum (table:get sat-sum-pheromones ?) + 1
      foreach n-values current-sum [?] [
        set spinner lput self spinner 
      ]  
    ]
  ]
  let selected-sat item (random (length spinner)) spinner
  set my-sat selected-sat
  show (word "ant " self " chose " selected-sat)  
end

to choose-config
  let spinner []
  let config-pheromone-array table:get [sat-config-pheromones] of my-sentinel [who] of my-sat
  foreach n-values array:length config-pheromone-array [?] [
    let current-index ?
    foreach n-values array:item config-pheromone-array current-index [?] [
      set spinner lput current-index spinner 
    ]
  ]
  
  let selected-config-index array:item config-pheromone-array item (random (length spinner)) spinner
  set my-config-index selected-config-index
  
  let selected-config array:item my-config-index [available-configs] of my-sat
  set my-config selected-config
  show (word "ant " self " chose config " table:get problem-identifiers my-config)
  
  ;update the ant queues of our sat.
  let existing-queue table:get [ant-queues] of my-sentinel ([who] of my-sat)
  let new-queue lput who existing-queue
  table:put ([ant-queues] of my-sentinel) ([who] of my-sat) new-queue
  set is-waiting? true
end

to report-ant
  let me self
  let answer 0
  ask my-sentinel [
    ;communicate with ant
    set answer validate-report [results] of me [my-system] of me
  ]
  set results []
  if answer > 0 [
    show (word "ant " self " is gonna drop pheromones.")
    drop-pheromones answer
  ]
end

to drop-pheromones [concentration]
  show "dropping pheromones"
  let sat-node 0
  set sat-node [who] of my-sat
  ask my-sentinel [
     ;NEW
     let existing-pheromones array:item (table:get sat-config-pheromones sat-node) [my-config-index] of myself
     array:set (table:get sat-config-pheromones sat-node) [my-config-index] of myself (existing-pheromones + concentration)
  ]
  reset-time (sat sat-node) my-config-index
end