globals [ min-time-to-return search-radius ] 

breed [sentinels sentinel]
breed [markers marker]

sentinels-own [ my-ground  ;ground
                
                my-supervisor
                
                sat-pheromone-values  ;table, sat -> array of pheromones for each satellite
              
                total-pheromone-values  ;array, sum of each satellite pheromone value
              
                ant-queues  ;table, satellite -> [ list of ants ready to commit to satellite ]
                
                participating  ;boolean
                
                pheromone-concentration
                
                ;previous-values
                
                context ]  ;rules that govern what sentinel perceives as irregular behavior for systems

to setup-sentinel-network
  ; to-do track pheromones 
  set min-time-to-return 50
  set search-radius 10
end

to setup-sentinel [a-ground]
  ask a-ground [
    set my-sentinel myself 
  ]
  set my-ground a-ground
  set shape "target"
  set color red
  set zcor 49
  set xcor [long] of my-ground / scale2d
  set ycor [lat] of my-ground / scale2d
  set ant-queues table:make
  set sat-pheromone-values table:make
  set total-pheromone-values array:from-list n-values number-pheromones [0]
  set participating true
  set pheromone-concentration 1
  ;set previous-values table:make
end

to-report validate-report [ant-data]
  ; to-do
  ; gotta put pheromones at other satellites around, MAKE SURE THEY ARE PARTICIPATING
  let a-gps 0
  let a-lat 0
  let a-long 0
  let a-variable 0
  let a-value 0
  foreach ant-data [  
    set a-gps item 0 ?
    set a-lat item 0 a-gps
    set a-long item 1 a-gps
  
    set a-variable item 1 ?
    set a-value item 2 ?
    ; to-do counter will increase for every hit.
  ]
  ;how should we validate?
  
  let temporary-boolean true 
  ifelse temporary-boolean [
    ;look for other satellites
    let nearby-sats []
    ask sats with [get-dist a-gps (list lat long) < search-radius] [set nearby-sats lput self nearby-sats]
    
    foreach nearby-sats [
      let sentinel-set (turtle-set)
      ask my-supervisor [
        set sentinel-set get-sentinels-with ? 
      ]
      if any? sentinel-set [
        ask one-of sentinel-set [
          drop-pheromones-at ? DEVIATION-PHEROMONE pheromone-concentration 
        ]
      ]
    ]
    report pheromone-concentration 
  ]
  [
    report 0
  ]
end

to-report prep-ant [an-ant a-sat]
  ;show (word "Prepping ant " an-ant)
  let commands [command-archive] of my-ground
  if [pheromone-type] of an-ant = DEVIATION-PHEROMONE [
    let previous-values []
    show commands
    foreach table:keys commands [
      let current-list table:get commands ?
      ;show current-list
      if length current-list > 3 and member? [sat-id] of a-sat current-list 
                                 and member? [variable] of an-ant item 1 current-list [
        set previous-values lput item 4 current-list previous-values
      ]
    ]
    ifelse is-string? previous-values or length previous-values < 2 [
      ;abort this preperation, we don't have the data.
      show (word "prep ant failed for " an-ant)
      ;show previous-values
      report false 
    ]
    [
      show previous-values
      ask an-ant [
        set index 0
        set average 0
        set sum-of-squares 0
        let delta 0
        foreach previous-values [
          let current-value ?
          if is-string? current-value [
            set current-value length ? 
          ]
          set index index + 1
          set delta current-value - average
          set average average + (delta / index)
          set sum-of-squares sum-of-squares + delta * (current-value - average)  
        ]
        set std-dev sqrt (sum-of-squares / (index - 1))
        set threshold std-dev * num-deviations
        ;show my-sentinel
        ;show my-system
      ]
      report true
    ]
  ]
end

to highlight-report [a-lat a-long]
  ;draw it on the gui
  create-markers 1 [
    set shape "x"
    set color pink
    set zcor 49
    set heading 0
    set xcor a-long / scale2d
    set ycor a-lat / scale2d
  ]
end

to drop-pheromones-at [a-sat a-type concentration]
  let sat-node [who] of a-sat
  
  let existing-pheromone-value array:item (table:get sat-pheromone-values sat-node) a-type
  let pheromone-array table:get sat-pheromone-values sat-node
  array:set pheromone-array a-type (existing-pheromone-value + concentration)
  
  ;this updates the total pheromone value for the specified pheromone
  let existing-total-pheromone-value array:item total-pheromone-values a-type
  array:set total-pheromone-values a-type (existing-total-pheromone-value + concentration)
  ;update-total-pheromones
  
  reset-time a-sat a-type
end

to update-total-pheromones 
  foreach n-values array:length total-pheromone-values [?] [
    let current-index ?
    let current-count 0
    foreach table:keys sat-pheromone-values [
      let current-array table:get sat-pheromone-values ?
      set current-count current-count + array:item current-array current-index 
    ]
    array:set total-pheromone-values current-index current-count
  ]
end

to update-previous-values
  let commands [command-archive] of my-ground
  let latest-long 0
  let latest-lat 0
  foreach table:keys commands [
    let current-list table:get commands ?
    if (length current-list > 3) and (member? "LONG" item 1 current-list) [
      set latest-long item 4 current-list
    ]
    if (length current-list > 3) and (member? "LAT" item 1 current-list) [
      set latest-lat item 4 current-list
    ]  
  ]
  ;table:put previous-values "LONG" latest-long
  ;table:put previous-values "LAT" latest-lat
end

to remove-ant [an-ant a-sat]
  show (word "removing ant " an-ant " from " a-sat)
  let existing-ants table:get ant-queues [who] of a-sat
  table:put ant-queues [who] of a-sat remove [who] of an-ant existing-ants
  show table:get ant-queues [who] of a-sat
end