globals [ min-time-to-return search-radius ] 

breed [sentinels sentinel]
breed [markers marker]

sentinels-own [ my-ground  ;ground
                
                my-environment
                
                ;sat-pheromone-values  ;table, sat -> array of pheromones for each satellite
              
                ;total-pheromone-values  ;array, sum of each satellite pheromone value
              
                ant-queues  ;table, satellite -> [ list of ants ready to commit to satellite ]
                
                participating  ;boolean
                
                pheromone-concentration
                
                ;previous-values
                
                contexts  ;table, satellite -> [list of known problems]
                
                number-config
                
                sat-config-pheromones
                
                sat-sum-pheromones
                
                pheromones ]

to setup-sentinel-network
  ; to-do track pheromones 
  set min-time-to-return 50
  set search-radius 10
end

to setup-sentinel [a-ground]
  ask a-ground [
    set my-sentinel myself 
  ]
  set my-ground a-ground
  set shape "target"
  set color red
  set zcor 49
  set xcor [long] of my-ground / scale2d
  set ycor [lat] of my-ground / scale2d
  set ant-queues table:make
  ;set sat-pheromone-values table:make
  ;set total-pheromone-values array:from-list n-values number-pheromones [0]
  
  set sat-config-pheromones table:make
  
  set sat-sum-pheromones table:make
  
  set contexts table:make
  
  set participating true
  set pheromone-concentration 1
  ;set previous-values table:make
end

to-report validate-report [problem-type ant-data ant-sat]
  ; to-do
  ; gotta put pheromones at other satellites around, MAKE SURE THEY ARE PARTICIPATING
  if member? problem-type (table:get contexts [who] of ant-sat) [
    show ("Problem accounted for.")
    report false
  ]
  
  ;Keep track of all nearby sats so we don't overload them with pheromones.
  let sats-touched (list ant-sat)
  ;show ant-data
  foreach ant-data [
    let a-gps ?
    let a-lat item 0 a-gps
    let a-long item 1 a-gps
    
    request-highlighting (list problem-type a-lat a-long)
    ; to-do counter will increase for every hit.
    ;highlight-report a-lat a-long
    let nearby-sats []
    ;Nearby sats must be close-enough, not yet touched, and have this configuration.
    ask sats with [(get-dist a-gps (list lat long) < search-radius)
               and (not member? self sats-touched)
               and (member? problem-type available-configs)] [
      set nearby-sats lput self nearby-sats
      set sats-touched lput self sats-touched
    ]
    foreach nearby-sats [
      let sentinel-set (turtle-set)
      ;find all sentinels with access to this satellite.
      ask my-environment [
        set sentinel-set get-sentinels-with ? 
      ]
      ;if there's at least one sentinel, drop pheromones at the propoer config.
      if any? sentinel-set [
        ask one-of sentinel-set [
          drop-pheromones-at ? problem-type pheromone-concentration 
        ]
      ]
    ]
  ]
  ;how should we validate?
  
  report pheromone-concentration
end

;args: a list containing [type, lat, long]
to request-highlighting [a-request]
  set highlight-queue lput a-request highlight-queue
end

to drop-pheromones-at [a-sat a-config concentration]
  let sat-node [who] of a-sat
  ;NEW
  let desired-index -1
  foreach n-values length [available-configs] of a-sat [?] [
    if item ? [available-configs] of a-sat = a-config [
      set desired-index ? 
    ]
  ]
  if desired-index != -1 [
    let existing-pheromones array:item (table:get sat-config-pheromones sat-node) desired-index
    array:set (table:get sat-config-pheromones sat-node) desired-index (existing-pheromones + concentration)
    reset-time a-sat desired-index
  ]
end

;NEW
to update-sum-pheromones
  let overall-sum 0
  foreach table:keys sat-config-pheromones [
    let current-sum 0
    let current-sat ?
    let current-configs table:get sat-config-pheromones ?
    foreach n-values array:length current-configs [?] [
      set current-sum current-sum + array:item current-configs ?   
    ]
    table:put sat-sum-pheromones current-sat current-sum
    set overall-sum overall-sum + current-sum
  ]   
  set pheromones overall-sum
end

to remove-ant [an-ant a-sat]
  show (word "removing ant " an-ant " from " a-sat)
  let existing-ants table:get ant-queues [who] of a-sat
  table:put ant-queues [who] of a-sat remove [who] of an-ant existing-ants
  ;show table:get ant-queues [who] of a-sat
end