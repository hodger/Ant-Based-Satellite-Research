globals [ geo-coors ]

breed [ sats sat ]

;sat variables
sats-own [ name  ;string

           lat long  ;float, longitude for geosynchronous sats
           
           my-system ;sat-os agent
           
           connected-grounds  ;list, grounds with active downlink from this sat
           
           sat-ID  ;float, NORAD Number

           country  ;string
           
           circ-radius  ;float, orbital radius

           period  ;float

           freq  ;float, transmission frequency

           inclination  ;float, degree difference between equatorial plane
                        ;and sat orbit

           deg-per-tick  ;float


           cone-angle cone-dist  ;floats, determine size of cone in which sat
                                 ;will find ground stations

           tag coor-shown noheight? noname? nocoor? noid?  ;string, string bool, bool, bool
                                                            ;used for properly creating info
                                                            ;string to display above agent.
                                                            
           available-configs ;list, configuration types
           
           current-problems ] ;list, problems occuring on this satellite
                                                            
to setup-sats
  create-systems satnum [ ]
  set sys-list []
  ask systems [ set sys-list lput self sys-list ]
  
  set geo-coors table:make
  
  file-open "res/UCS_Satellite_Database_1-1-16.csv"
  let waste csv:from-row file-read-line ;gets rid of the first line (column definitions)
  let sys-count 0
  let freq-count 0
  
  create-sats satnum [
    let csv-data csv:from-row file-read-line
    
    ;randomize configs
    let how-many-configs (random num-problem-types - min-config-types) + min-config-types
    let possible-configs n-values num-problem-types [?]
    let my-configs []
    foreach n-values how-many-configs [?] [
      ;choose a random config and add it to our available configs.
      let current-config-index (random length possible-configs)
      let current-config item current-config-index possible-configs
      set my-configs lput current-config my-configs
      ;remove the chosen config so we dont' choose it more than once
      set possible-configs remove-item current-config-index possible-configs 
    ]
    set available-configs my-configs
    set current-problems []
    
    ;read necessary csv items
    set name item 0 csv-data
    set country item 2 csv-data
    let is-geo item 7 csv-data
    set long item 9 csv-data
    set circ-radius item 11 csv-data
    set inclination item 13 csv-data    
    set period item 14 csv-data
    set sat-ID item 25 csv-data
    
    ;label variables
    set noname? true
    set noheight? true
    set nocoor? true
    set noid? true
    set tag ""
    
    ;parse variables from raw csv output
    if is-string? long
      [ifelse long = ""
        [set long 0 show (word name " has no long. Setting to 0")]
        [set long read-from-string remove "," long]
      ]
    
    if is-string? sat-ID
      [set sat-ID (read-from-string remove "," sat-ID)]

    if is-string? circ-radius
      [set circ-radius (read-from-string remove "," circ-radius)]

    if is-string? inclination
      [ifelse inclination = ""
        [set inclination 0 show (word name " has no inclination. Setting to 0")]
        [set inclination read-from-string remove "," inclination]
      ]

    if is-string? period
      [ifelse period = ""
        [set period (1437) show (word name " has no period. Setting to 35700")]
        [set period (read-from-string remove "," period)]
      ]
    
    ;fix out-of-bounds lat and long
    if inclination > 90 [ set inclination (-1) * (90 - inclination) ]
    set lat inclination
    
    if long > 180 [ set long (-1) * (360 - long) ]
    
    ;communication variables
    ifelse table:has-key? freq-table country [
      set freq table:get freq-table country  
    ]
    [
      table:put freq-table country freq-count
      set freq-count freq-count + 1 
    ]
    set cone-dist circ-radius / scale
    set cone-angle 10
    set connected-grounds []
    
    ;scale data points
    set period period / scale
    set circ-radius ( circ-radius / scale + earth-radius / scale)
    
    let existing-sats []
    if table:has-key? sats-by-height circ-radius [
      set existing-sats table:get sats-by-height circ-radius 
    ]
    table:put sats-by-height circ-radius lput self existing-sats
    
    ;determine degrees to travel each tick
    let deg-per-min (360 / period)
    set deg-per-tick deg-per-min * tick-frac

    ;Use long and inclination to position satellites. We only know the long
    ;for GEO sats, so they are easier to place. LEO sats are set to their
    ;respective inclination and then randomly rotated.
    
    ifelse is-geo = "GEO"
      [;set is-geo? true
       set heading 0
       lt long
       set roll 90
       lt inclination
       fd circ-radius
       tilt-down 90
       let existing-coors []
       if table:has-key? geo-coors country [ set existing-coors table:get geo-coors country ]
       table:put geo-coors country lput list long lat existing-coors
      ]
      [;set is-geo? false
       set long random 360
       if long > 180 [ set long (-1) * (360 - long) ]
       set heading 0
       lt long
       set roll 90
       lt inclination
       ;ifelse random 2 = 1
       ;  [lt inclination]
       ;  [rt inclination]
       fd circ-radius
       tilt-down 90
      ]

      ;OS setup

      set my-system item sys-count sys-list
      ask (item sys-count sys-list) [
        set my-sat myself
        setup-system (list (list "NAME" [name] of myself)
                           (list "LAT" [lat] of myself)
                           (list "LONG" [long] of myself)
                           (list "FREQ" [freq] of myself)
                           (list "ID" [sat-ID] of myself))
        set zcor 49
        set heading 0
        set draw-long table:get sat-data "LONG"
        set draw-lat table:get sat-data "LAT"
        set xcor table:get sat-data "LONG" / scale2d
        set ycor table:get sat-data "LAT" / scale2d
        set color white
        ;pen-down
      ]
      set sys-count sys-count + 1
  ]
  file-close
end

to-report has-problem? [problem-id]
  foreach current-problems [
    if ? = problem-id [
      report true 
    ] 
  ]
  report false
end

;sats procedure
to refresh-downlinks
  tilt-down 90
  let visible other grounds-in-cone with [freq = [freq] of myself]
  let new-list []
  ask visible [
    create-downlink-from myself
    if not member? self [connected-grounds] of myself [
     ; show (word "DOWNLINK ESTABLISHED: " [name] of myself " --> " [name] of self)
    ]
    set new-list lput self new-list
  ]
  ifelse length connected-grounds > 0 [ ask my-system [ set color green ] ] [ ask my-system [ set color white ] ]
  let current-sat self
  foreach connected-grounds [
    if not member? ? visible [
      ask downlink [who] of current-sat [who] of ? [ die ]
      ;show (word "DOWNLINK LOST: " [name] of self " -X-> " [name] of ?)
    ]
  ]
  set connected-grounds new-list
  tilt-up 90
end

to-report grounds-in-cone
  let inside (turtle-set)
  let my-point list lat long
  let current-height circ-radius - (earth-radius / scale)
  let current-radius (current-height * tan (.5 * cone-angle))
  ask grounds [ 
    if (haversine (list lat long) my-point) <= current-radius [
      set inside (turtle-set inside self)
    ]
  ]
  report inside
end

;This procedure adds information to agents' labels based on the status of switches.
;The information is displayed in the order that the switches are flipped.
to configure-settings
  ifelse show-name?
    [if noname?
      [set tag (word tag name " | ")
       set noname? false]]
    [set tag remove (word name " | ") tag
     set noname? true]

  ifelse show-height?
    [if noheight?
      [set tag (word tag (circ-radius * scale) " | ")
       set noheight? false]]
    [set tag remove (word (circ-radius * scale) " | ") tag
     set noheight? true]

  ifelse show-coor?
    [if nocoor?
      [set coor-shown display-coor lat long
       set tag (word tag coor-shown " | ")
       set nocoor? false]]
    [set tag remove (word coor-shown " | ") tag
     set nocoor? true]

  ifelse show-id?
    [if noid?
      [set tag (word tag sat-ID " | ")
       set noid? false]]
    [set tag remove (word sat-ID " | ") tag
     set noid? true]

  set label tag
end                                          