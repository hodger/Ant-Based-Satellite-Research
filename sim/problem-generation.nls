globals [all-problems]

to setup-problems
  set all-problems table:make
  ask sats [
    table:put all-problems who []
  ]
end

to delegate-problems
  foreach table:keys all-problems [
    let current-sat sat ?
    let workaround true
    ask current-sat [
      if length my-problems = length available-configs [
        set workaround false 
      ] 
    ]
    ;if the current sat does not have all available problems.
    if (workaround = true) [
      ;give a new problem
      let remaining-problems []
      let a-num random 50
      if a-num = 1 [
        foreach [available-configs] of current-sat [
          ;if this problem isn't already active, it's available for us to pick
          if not member? ? [my-problems] of current-sat [
            set remaining-problems lput ? remaining-problems 
          ]
        ]
        let problem-choice item (random (length remaining-problems)) remaining-problems
        create-problem current-sat problem-choice
      ]
    ]
  ]
end

to create-problem [a-sat a-problem] 
  show (word "adding problem " a-problem " to " a-sat)
  ask a-sat [
    set my-problems lput a-problem my-problems 
  ]
  let existing table:get all-problems [who] of a-sat
  table:put all-problems [who] of a-sat lput (list time-numerical (random (max-problem-duration - min-problem-duration) + min-problem-duration)) existing 
end

to refresh-problems 
  foreach table:keys all-problems [
    let sat-num ?
    let current-times table:get all-problems sat-num
   
    let new-times current-times
    
    foreach n-values length current-times [?] [
      let current-pair item ? current-times
      let init-time item 0 current-pair
      let duration item 1 current-pair
      let delta time-numerical - init-time
      
      if delta >= duration [
        show (word "expiring problem index " ? " from sat " sat-num)
        ;expire problem
        set new-times remove-item ? new-times
        ask sat sat-num [
          set my-problems remove-item ? my-problems
        ]
      ] 
    ]
    table:put all-problems sat-num new-times 
  ]
end

;randomly generate a context for a sat based on its available ant configurations.
to-report load-context [a-sat]
  let context-list []
  let temp-list [available-configs] of a-sat
  let a-length length temp-list
  let chosen random a-length
  foreach n-values chosen [?] [
    let config random length temp-list
    set context-list lput config context-list
    set temp-list remove config temp-list 
  ]
  report context-list
end