globals [ number-pheromones ; number, how many pheromone types
          pheromone-time-map
          global-pheromone-map
          EVAPORATION-TIME
          EVAPORATION-VALUE
          MARKOVIAN-PHEROMONE
          DEVIATION-PHEROMONE
          total-pheromones ] ; array, sum all pheromones in the simulation.

breed [ environments environment ]

environments-own [
  sentinel-list
]

to setup-environment
  set number-pheromones 2
  set total-pheromones array:from-list (n-values number-pheromones [0])
  set EVAPORATION-TIME 25
  set EVAPORATION-VALUE 5
  ;copy grounds to a temporary agentset
  let temp-grounds grounds
  let temp-list []
  
  setup-sentinel-network
  
  create-sentinels 18 [
    ;hide-turtle
    let current-ground one-of temp-grounds    
    
    setup-sentinel current-ground
    
    set temp-list lput self temp-list
    ;remove ground we just used
    set temp-grounds temp-grounds with [ self != current-ground ]
    update-total-pheromones
  ]
  
  create-environments 1 [
     ;hide-turtle
     set sentinel-list temp-list
     set pheromone-time-map table:make
     set global-pheromone-map table:make
     set MARKOVIAN-PHEROMONE 0
     set DEVIATION-PHEROMONE 1
     foreach sentinel-list [
       ask ? [
         set my-environment myself 
       ] 
     ]
  ]
end

;update global total pheromone array
to update
  foreach sentinel-list [
    ;update total pheromones, for use when ants decide to do
    let current-sentinel ?
    ask current-sentinel [
        update-total-pheromones 
      ]
    foreach n-values array:length [total-pheromone-values] of current-sentinel [?] [
      let existing-pheromones array:item total-pheromones ?
      ;print existing-pheromones
      let new-pheromones (array:item [total-pheromone-values] of current-sentinel ?) ;- (table:length [ant-queues] of current-sentinel)
      ;print new-pheromones
      array:set total-pheromones ? (existing-pheromones + new-pheromones)
    ]
  ]
end

to-report add-sat-to-global-map [a-sat] 
  ifelse table:has-key? global-pheromone-map [who] of a-sat [
    ;report pointer to the array.
    report table:get global-pheromone-map [who] of a-sat
  ]
  [
    let new-pheromone-list n-values number-pheromones [0]
    table:put global-pheromone-map [who] of a-sat array:from-list new-pheromone-list
    report table:get global-pheromone-map [who] of a-sat 
  ]
end

to reset-time [a-sat a-type]
  ifelse table:has-key? pheromone-time-map [who] of a-sat [
    array:set (table:get pheromone-time-map [who] of a-sat) a-type time-numerical 
  ]
  [
    let new-time-list n-values number-pheromones [0]
    foreach new-time-list [
      set new-time-list replace-item ? new-time-list time-numerical 
    ]
    table:put pheromone-time-map [who] of a-sat array:from-list new-time-list
  ]
end

to decay-pheromones
  ; to-do
  ; must decay or everything will be ruined.
  if table:length pheromone-time-map > 0 [
  foreach table:keys pheromone-time-map [
    let current-sat ?
    let current-times table:get pheromone-time-map ?
    let current-pheromones table:get global-pheromone-map current-sat
    
    foreach n-values number-pheromones [?] [
      let current-value array:item current-pheromones ?
      ;we don't need to evaporate if we're at the lowest pheromone value already.
      if array:item current-pheromones ? > 1 [
        if time-numerical - array:item current-times ? > EVAPORATION-TIME [
          ;set the new pheromone value in the array
          array:set current-pheromones ? current-value - EVAPORATION-VALUE
          ;set the new time value in the array
          array:set current-times ? time-numerical
        ] 
      ]
    ] 
  ]
  ]
end

to-report is-sat-reachable? [a-sat]
  foreach sentinel-list [
    if table:has-key? ant-queues a-sat and participating [
      report true 
    ]
  ]
  report false
end

to-report get-sentinels-with [a-sat]
  let destinations (turtle-set)
  foreach sentinel-list [
    ask ? [  
      if table:has-key? ant-queues a-sat and participating [
        set destinations (turtle-set destinations ?) 
      ] 
    ]
  ]
  show destinations
  report destinations
end

to spawn-ant-at [a-sentinel a-sat a-type]
  if [participating] of a-sentinel [
    create-ants 1 [
      setup-basic-ant
      ;temporary while we only have one kind of ant
      setup-deviation-ant "freddy" 3 "LONG"
      ;-------------------
      set my-sentinel a-sentinel
      set is-waiting? true
      ask a-sentinel [
        if prep-ant myself a-sat [
          table:put ant-queues [who] of a-sat lput ([who] of myself) (table:get ant-queues [who] of a-sat)
        ]
      ]
    ]
  ]
  
end