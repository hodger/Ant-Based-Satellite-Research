globals [ number-pheromones ; number, how many pheromone types
          pheromone-time-map
          global-pheromone-map
          EVAPORATION-TIME
          EVAPORATION-VALUE
          MAX-PHEROMONE-VALUE
          ;total-pheromones 
          
          global-config-pheromones ; table, sat -> array of pheromones for each configuration
          global-config-pheromone-times ; table, sat -> array of latest pheromone drop time for each configuration
          global-sat-contexts ; table, sat -> array of problem-types which should be treated as exceptions
          
          global-sat-ants-detecting ; table, sat who number -> list of ant who numbers
          
          problem-identifiers ; map, problem id -> string identifier ('A', 'B', ... ,'AA')
          highlight-queue
          
          SWARM-NUMBER
          ] 

breed [ environments environment ]

environments-own [
  sentinel-list
]

to setup-environment
  set number-pheromones 2
  ;set total-pheromones array:from-list (n-values number-pheromones [0])
  set EVAPORATION-TIME 10
  set EVAPORATION-VALUE 5
  
  ;what do we consider a swarm?
  set SWARM-NUMBER 5
  set MAX-PHEROMONE-VALUE 100
  
  ;copy grounds to a temporary agentset
  let temp-grounds grounds
  let temp-list []
  
  set global-config-pheromones table:make
  set global-config-pheromone-times table:make
  set global-sat-contexts table:make
  set global-sat-ants-detecting table:make
  setup-problem-identifiers
  set highlight-queue []
  
  setup-sentinel-network
  
  create-sentinels count temp-grounds [
    ;hide-turtle
    let current-ground one-of temp-grounds    
    
    setup-sentinel current-ground
    
    set temp-list lput self temp-list
    ;remove ground we just used
    set temp-grounds temp-grounds with [ self != current-ground ]
    update-sum-pheromones
  ]
  
  create-environments 1 [
     ;hide-turtle
     set sentinel-list temp-list
     set pheromone-time-map table:make
     set global-pheromone-map table:make
     foreach sentinel-list [
       ask ? [
         set my-environment myself 
       ] 
     ]
  ]
end

to setup-problem-identifiers
  set problem-identifiers table:make
  let letter-values table:from-list [[0 "A"][1 "B"][2 "C"][3 "D"][4 "E"][5 "F"][6 "G"][7 "H"][8 "I"]
                                     [9 "J"][10 "K"][11 "L"][12 "M"][13 "N"][14 "O"][15 "P"][16 "Q"]
                                     [17 "R"][18 "S"][19 "T"][20 "U"][21 "V"][22 "W"][23 "X"][24 "Y"]
                                     [25 "Z"]]
  foreach n-values num-problem-types [?] [
    let current-id ?
    let mults-26 floor current-id / 26
    let remaining current-id mod 26
    let identifier ""
    foreach n-values mults-26 [?] [
       set identifier (word identifier "A")
    ]
    set identifier (word identifier table:get letter-values remaining)
    table:put problem-identifiers current-id identifier
  ]
end

;update global total pheromone array
to update
  foreach sentinel-list [
    ;update total pheromones, for use when ants decide to do
    let current-sentinel ?
    ask current-sentinel [
        ;NEW
        update-sum-pheromones
    ]
  ]
end

to-report get-sat-config-array [a-sat]
  ifelse table:has-key? global-config-pheromones [who] of a-sat [
    report table:get global-config-pheromones [who] of a-sat 
  ]
  [
    ;use the length of the satellite's 'available-config' list
    let config-number length [available-configs] of a-sat
    let new-config-pheromone-list n-values (config-number) [0]
    table:put global-config-pheromones ([who] of a-sat) array:from-list new-config-pheromone-list
    report table:get global-config-pheromones [who] of a-sat
  ]
end

to-report get-sat-context [a-sat]
  ifelse table:has-key? global-sat-contexts [who] of a-sat [
    report table:get global-sat-contexts [who] of a-sat
  ]
  [
    let context load-context a-sat
    table:put global-sat-contexts [who] of a-sat context
    report context
  ]
end

;When pheromones drop, we reset the decay timer.
to reset-time [a-sat a-config-index]
  ifelse table:has-key? global-config-pheromone-times [who] of a-sat [
    array:set (table:get global-config-pheromone-times [who] of a-sat) a-config-index time-numerical  
  ]
  [
    let new-time-list n-values array:length (table:get global-config-pheromones [who] of a-sat) [0]
    foreach new-time-list [
      set new-time-list replace-item ? new-time-list time-numerical 
    ]
    table:put global-config-pheromone-times [who] of a-sat array:from-list new-time-list
  ]
end

;NEW
to decay-pheromones
  if table:length global-config-pheromone-times > 0 [
    ;keys are satellite 'who' numbers
    foreach table:keys global-config-pheromone-times [
      let current-sat ?
      let current-times table:get global-config-pheromone-times ?
      let current-pheromones table:get global-config-pheromones ?
      foreach n-values array:length current-times [?] [
         let current-pheromone-value array:item current-pheromones ?
         if current-pheromone-value > 0 [
           if time-numerical - array:item current-times ? > EVAPORATION-TIME [
             let new-pheromone-value current-pheromone-value - EVAPORATION-VALUE
             ;make sure the new value is 0 or above.
             if new-pheromone-value < 0 [
                set new-pheromone-value 0
             ]
             array:set current-pheromones ? new-pheromone-value
             array:set current-times ? time-numerical
           ]
         ]  
      ]
    ] 
  ]
end

to-report is-sat-reachable? [a-sat]
  foreach sentinel-list [
    if table:has-key? ant-queues a-sat and participating [
      report true 
    ]
  ]
  report false
end

to-report get-sentinels-with [a-sat]
  let destinations (turtle-set)
  foreach sentinel-list [
    ask ? [  
      if table:has-key? ant-queues a-sat and participating [
        set destinations (turtle-set destinations ?) 
      ] 
    ]
  ]
  ;show destinations
  report destinations
end

to highlight-reports
  ;draw it on the gui
  let last-lat 0
  let last-long 0
  
  foreach highlight-queue [  
    let a-type item 0 ?
    let a-lat item 1 ?
    let a-long item 2 ?
    if get-dist (list last-lat last-long) (list a-lat a-long) > 10 [
      create-markers 1 [
        set shape "x"
        set color pink
        set zcor 49
        set heading 0
        set xcor a-long / scale-2d
        set ycor a-lat / scale-2d
        set label table:get problem-identifiers a-type
      ]
    ]
    set last-lat a-lat
    set last-long a-long
  ]
  set highlight-queue []
end

;to spawn-ant-at [a-sentinel a-sat a-type]
;  if [participating] of a-sentinel [
;    create-ants 1 [
;      setup-basic-ant "freddy"
;      set my-sentinel a-sentinel
;      set is-waiting? true
;      ask a-sentinel [
;        if prep-ant myself a-sat [
;          table:put ant-queues [who] of a-sat lput ([who] of myself) (table:get ant-queues [who] of a-sat)
;        ]
;      ]
;    ]
;  ]
;  
;end