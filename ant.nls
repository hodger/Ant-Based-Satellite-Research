globals [ ant-dispatch-table ]

breed [ ants ant ]

ants-own [ my-system
           
           my-ground
           
           threshold
           
           data
           
           gps
           
           results
           
           pheromone-type
           
           average
           
           species
           
           risk-pieces
           
           name
           
           index
           
           std-dev
           
           num-deviations
           
           ;do this thing
           sum-of-squares
           
           is-dispatched? ]

;static procedure
to setup-ants [ sys stream a-name deviation ]
  set ant-dispatch-table table:make
  table:put ant-dispatch-table "deviation" task [ go-deviation ]
end

;points is a list of two data points
to setup-deviation-ant [ sys points a-name num-dev ]
  set my-system sys
  set name a-name
  set species "deviation"
  set num-deviations num-dev
  ;if the stream is strings, we will use their lengths
  
  set index 0
  set average 0
  set sum-of-squares 0
  let delta 0
  
  foreach n-values length points [?] [
    let current item ? points
    if is-string? current [ 
      set current length current
      set points replace-item ? points current 
    ]
    set index index + 1
    set delta current - average
    set average average + (delta / index)
    set sum-of-squares sum-of-squares + delta * (current - average)   
  ]
  set std-dev sqrt (sum-of-squares / (index - 1))
  set threshold std-dev * num-deviations
end

to setup-location-ant [ sys points a-name ]
  set my-system sys
  set name a-name
  set species "location"
end

to-report go-ant
  let ret runresult table:get ant-dispatch-table species 
  report ret
end

to go-deviation
  ifelse abs (average - data) > threshold [ 
    ;we found an abnormality
    report list true gps 
  ]
  [
    ;system normal, reset detection criteria
    set index index + 1
    let delta data - average
    set average average + (delta / index)
    set sum-of-squares sum-of-squares + delta * (data - average)
    set std-dev sqrt (sum-of-squares / (index - 1))
    set threshold std-dev * num-deviations

    report list false gps
  ]
end

to choose-ground
  
end

to choose-sat
  let base 0
  let current-total array:item total-pheromone-values pheromone-type
  ;initialize weighted movement chooser
  let spinner array:from-list n-values current-total [0] 
  ask my-ground [
    ;for every sat
    foreach table:keys sat-pheromone-values [
      ;get the sat, the array, and the current value
      let current-sat ?
      let current-array table:get sat-pheromone-values ?
      let current-pheromone-value array:item current-array [pheromone-type] of myself
      ;place the sat in our chooser as many times as it has pheromones of our type
      foreach n-values current-pheromone-value [?] [
        array:set spinner (base + ?) ? 
      ]
      ;update the base variable to put values in the correct place next time
      set base current-pheromone-value   
    ]   
     ;randomly select a satellite from the weighted chooser
    let selected-sat array:item spinner (random current-total)
    let existing-queue table:get ant-queues selected-sat 
    table:put ant-queues selected-sat lput myself existing-queue
  ]
end

to report-ant
  let me self
  let answer false
  ask my-ground [
    ask my-sentinel [
       ;communicate with ant
       set answer validate-report [results] of me
    ] 
  ]
  if answer > 0 [
    drop-pheromones answer
  ]
end

to drop-pheromones [concentration]
  let sat-node 0
  ask my-system [ set sat-node my-sat ]
  ask my-ground [
     let existing-pheromone-value array:item (table:get sat-pheromone-values sat-node) [pheromone-type] of myself
     array:set (table:get sat-pheromone-values sat-node) [pheromone-type] of myself (existing-pheromone-value + concentration) 
  ]
end