globals [ total-pheromones ]

breed [ grounds ground ]
breed [ grounds-2d ground-2d ]

;ground station variables
grounds-own [ name; string

              lat long  ;floats, earthly position

              freq  ;float, transmission frequency

              country  ;string
              
              cone-angle cone-dist  ;floats, determine size of cone in which ground
                                    ;will detect sats

              connected-sats  ;list, sats with active uplink from this ground

              circ-radius  ;float, orbital radius

              deg-per-tick ;float, how far to move.

              requested-commands ;table, satellite NORAD number -> command string.

              command-archive ;table, process ID -> [SAT, COMMAND, TIME-SENT, OUTPUT, TIME-RECEIVED]

              my-sentinel  ;sentinel
              
              sat-pheromone-values  ;table, sat -> array of pheromones for each satellite
              
              total-pheromone-values  ;array, sum of each satellite pheromone value
              
              ant-queues  ;table, satellite -> [ list of ants ready to commit to satellite ]
              
              ground-ID ;float, randomized ID

              current-process-ID ]  ;float

;Ground stations are defined by their latitude and longitude on Earth. The are
;rotated and tilted to reach this position. Their movement is essentially a
;"horizontal orbit" which represents the Earth's rotation.
to setup-ground
  create-grounds-2d groundnum [ ]
  set grounds-2d-list []
  ask grounds-2d [ set grounds-2d-list lput self grounds-2d-list ]
  file-open "groundstations.csv" ;test data
  let waste csv:from-row file-read-line ;gets rid of the first line (column definitions)
  let grounds-2d-count 0
  
  create-grounds groundnum [
    set shape "box"
    set color white
    let csv-data csv:from-row file-read-line
    
    set name item 0 csv-data
    set lat item 1 csv-data
    set long item 2 csv-data
    
    set freq 10
    set cone-dist 50
    set cone-angle 5
    set connected-sats []
    set requested-commands table:make
    ;the format of the archive is to be [ID: [SAT, COMMAND]] initially.
    ;however, once the output is transfered from the satellite,
    ;the format will become [ID: [SAT, COMMAND, OUTPUT]]
    set command-archive table:make
    set ground-ID random 10000
    set current-process-ID 0
    set ant-queues table:make
    set sat-pheromone-values table:make

    if is-string? lat
      [ifelse lat = ""
        [set lat 0 show (word name " has no lat. Setting to 0")]
        [set lat read-from-string remove "," lat]
      ]
    ;if lat > 90 [ set lat (-1) * (180 - lat) ]
    
    if is-string? long
      [ifelse long = ""
        [set long 0 show (word name " has no long. Setting to 0")]
        [set long read-from-string (remove "," long)]
      ]
    ;if long > 180 [ set long (-1) * (360 - long) ]

    set circ-radius abs (earth-radius / scale * cos ( lat ) )

    let deg-per-min 360 / (earth-rot-time / scale)
    set deg-per-tick deg-per-min * tick-frac

    set heading 0
    lt long
    tilt-up lat
    set roll 90
    fd earth-radius / scale
    tilt-down 90
    set roll 90
    
    ;2d plotting procedures
    ask item grounds-2d-count grounds-2d-list  [
       set shape "target"
       set color red
       
       set zcor 49
       set xcor [long] of myself / scale2d
       set ycor [lat] of myself / scale2d
    ]
    set grounds-2d-count grounds-2d-count + 1
  ]
  file-close
end

to manual-setup-ground [ a-name a-long a-lat a-freq ]
  create-grounds 1 [
    set shape "box"
    set color white
    
    set name a-name
    set long a-long
    set lat a-lat
    set freq a-freq
    set cone-dist 50
    set cone-angle 5
    set connected-sats []
    set requested-commands table:make
    ;the format of the archive is to be [ID: [SAT, COMMAND]] initially.
    ;however, once the output is transfered from the satellite,
    ;the format will become [ID: [SAT, COMMAND, OUTPUT]]
    set command-archive table:make
    set ant-queues table:make
    set sat-pheromone-values table:make
    set ground-ID random 10000
    set current-process-ID 0
    set circ-radius abs (earth-radius / scale * cos ( lat ) )

    let deg-per-min 360 / (earth-rot-time / scale)
    set deg-per-tick deg-per-min * tick-frac

    set heading 0
    lt long
    tilt-up lat
    set roll 90
    fd earth-radius / scale
    tilt-down 90
    set roll 90
  ]
end

;grounds procedure
;Input: list of two-item lists.
;Item 0 is to be the satellite NORAD number.
;Item 1 is to be the command string.
to request-commands [ the-commands ]
  foreach the-commands [
    let sat item 0 ?
    let ID (word ground-ID current-process-ID)
    let command (word ground-ID " " current-process-ID " " time " " item 1 ?)
    let existing-commands []
    if table:has-key? requested-commands sat [
       set existing-commands table:get requested-commands sat
    ]
    table:put requested-commands sat (sentence existing-commands command)
    table:put command-archive ID (list sat command time)
    set current-process-ID current-process-ID + 1
  ]
end

;grounds procedure
to refresh-uplinks
  tilt-up 90
  let visible sats-in-cone with [freq = [freq] of myself]
  let new-list []
  ask visible [
    create-uplink-from myself
    if not member? self [connected-sats] of myself [
      show (word "UPLINK ESTABLISHED: " [name] of myself " --> " [name] of self)
    ]
    set new-list lput self new-list
    if not table:has-key? [ant-queues] of myself who [ table:put [ant-queues] of myself who [] ]
    if not table:has-key? [sat-pheromone-values] of myself who [ table:put [sat-pheromone-values] of myself who [1 1 1] ]
  ]
  let current-ground self
  foreach connected-sats [
    if not member? ? visible [
      ask uplink [who] of current-ground [who] of ? [ die ]
      show (word "UPLINK LOST: " [name] of self " -X-> " [name] of ?)
    ]
  ]
  set connected-sats new-list
  tilt-down 90
end

;ground procedure
to-report sats-in-cone 
  let inside (turtle-set)
  let my-point list lat long
  foreach table:keys sats-by-height [
    let current-height ?
    let current-radius (current-height * tan (.5 * cone-angle))
    let current-list table:get sats-by-height ?
    foreach current-list [
       ask ? [
          if ((haversine (list lat long) my-point) <= current-radius) [
            ;the turtle is inside the cone.
            set inside (turtle-set inside self)
          ]
       ]
    ]
  ]
  report inside
end

to decay-pheromones
  ; to-do
  ; must decay or everything will be ruined.
end

to update-total-pheromones 
  foreach n-values array:length total-pheromone-values [?] [
    let current-index ?
    let current-count 0
    foreach table:keys sat-pheromone-values [
      let current-array table:get sat-pheromone-values ?
      set current-count current-count + array:item current-array current-index 
    ]
    array:set total-pheromone-values current-index current-count
  ]
end